#!/bin/bash
THIS_SCRIPT_NAME="$(basename $0)" ;
THIS_SCRIPT_NAME_SANS_EXTENSION="$(echo $THIS_SCRIPT_NAME | sed 's/\.sh//g')" ;
REQUIREMENTS_FILE="$REPO_SCRIPTS_MGGK/_REQUIREMENT_FILES_MGGK/$THIS_SCRIPT_NAME_SANS_EXTENSION-requirements.txt" ;

##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## CREATING SCRIPT USAGE FUNCION AND CALLING IT VIA '--help'
usage()
{
cat <<EOM
USAGE: $(basename $0)
    ################################################################################
    ## USAGE:
    #### > bash $THIS_SCRIPT_NAME \$1
    #### WHERE, \$1 IS ...
    ################################################################################
    ## INSERT_SCRIPT_DESCRIPTION 
    ## 
    ## 
    ################################################################################
    ## REQUIREMENT:  $REQUIREMENTS_FILE
    ################################################################################
    ## CREATED BY: PALI
    ## CREATED ON: INSERT_CURRENT_DATE
    ################################################################################
EOM

exit 0 ## EXITING IF ONLY USAGE IS NEEDED
}
## Calling the usage function
if [ "$1" == "--help" ] ; then usage ; fi
##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
FUNC_SOURCE_SCRIPTS () {
    ####
    source "$REPO_SCRIPTS_MINI/00200a_source_script_to_print_fancy_divider.sh" ;
    # This enables => 'palidivider' command, which prints a fancy divider on cli 
    # Eg. palidivider "THIS IS A TEST STRING." "$palihline | $palialine | $palibline | $palimline | $palipline | $palixline"
    ####
    source "$REPO_SCRIPTS_MINI/00200b_source_script_to_delete_chosen_files_and_dirs.sh" ; 
    # This enables => 'palidelete, palitrash-put, palitrash-empty, palitrash-list' commands, which move files into a _trashed_directory instead of deleting completely 
    ####
    ####################### ADDING COLOR TO OUTPUT ON CLI ##########################
    source $REPO_SCRIPTS/2000_vendor_programs/color-logger.sh
    # echo "Currently sourcing the bash color script, which outputs chosen texts in various colors ..." ;
    # info "This enables use of keywords for coloring, such as: debug, info, error, success, warn, highlight." ;
    # debug "Read it's help by running: >> bash $DIR_GITHUB/Bash-Scripts-To-Make-Life-Easier/2000_vendor_programs/color-logger.sh -h"
    ##############################################################################
}
FUNC_SOURCE_SCRIPTS ; 
palidivider ; 
##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##------------------------------------------------------------------------------
function FUNC_ONLY_RUN_FOR_THIS_USER () {
    ## ## Only run this program for this user
    echo "IMPORTANT NOTE: This script only runs on MAC OS." ; 
    if [ "$USER" == "abhishek" ] ; then
    echo "This is MAC OS. So, script will continue ... " ;
    else
    echo "This is not MAC OS. So, script will stop and exit now." ;
    exit 1 ;
    fi
}
FUNC_ONLY_RUN_FOR_THIS_USER
##------------------------------------------------------------------------------

##------------------------------------------------------------------------------
## ASSIGN COMPUTER HOSTNAME SPECIFIC VARIABLES
function FUNC_check_hostname_and_assign_proper_variables () {
    HOSTNAME=$(uname -n) ;
    ## Possible hostnames are: 
    #### AP-MBP.local // LAPTOP-F0AJ6LBG // ubuntu1804-digitalocean-bangalore-droplet
    ## 
    if [ "$HOSTNAME" == "ubuntu1804-digitalocean-bangalore-droplet" ] ; then
        WWWDIR="/var/www/vps.abhishekpaliwal.com/html/scripts-html-outputs" ;
        BASEDIR="$WWWDIR" ;
    else
        BASEDIR="$DIR_Y" ;
    fi
    ##
    echo ">> HOSTNAME IS = $HOSTNAME";
    echo ">> CHOSEN BASEDIR => $BASEDIR" ;
}
FUNC_check_hostname_and_assign_proper_variables
##------------------------------------------------------------------------------


##############################################################################
## SETTING VARIABLES
WORKDIR="$DIR_Y/_OUTPUT_$THIS_SCRIPT_NAME_SANS_EXTENSION" ;
mkdir -p $WORKDIR ; ## create dir if not exists
echo "##########################################" ; 
echo "## PRESENT WORKING DIRECTORY = $WORKDIR" ;
echo "##########################################" ; 

time_taken="$WORKDIR/tmp-time-taken-$THIS_SCRIPT_NAME_SANS_EXTENSION.txt" ;
echo "$(date) = START-TIME" > $time_taken

##############################################################################
## Confirmation to proceed
read -p "Press Enter key if OKAY ..." ; 
##############################################################################
OUTPUT_HTML="$WORKDIR/OUTPUT_$THIS_SCRIPT_NAME_SANS_EXTENSION.html" ;
OUTPUT_TXT="$WORKDIR/OUTPUT_$THIS_SCRIPT_NAME_SANS_EXTENSION.txt" ;
echo ;
##############################################################################

##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## USER INPUT:
echo; 
warn ">>>> PLEASE PROVIDE USER INPUT (press ENTER key to exit) =>" ;
read USER_INPUT_VARIABLE
echo;

## Check for validity if no input is given
## -z (= test if exists), -n (=test if exists and var is not empty string)
if [ -z "$USER_INPUT_VARIABLE" ]
then
  error "*** INVALID USER INPUT. PROGRAM WILL EXIT NOW. ***" ;
  exit 1 ; 
elif [ -n "$USER_INPUT_VARIABLE" ]
then
  echo ">>>> Variable value is valid and is not empty. " ;
  echo ">>>> USER_INPUT_VARIABLE value is = $USER_INPUT_VARIABLE" ;
  echo; 
fi
##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##############################################################################
HTML_BOOTSTRAP_HEADER="<!doctype html>
<html lang='en'>
<head>
    <!-- Required meta tags -->
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
    <!-- Bootstrap CSS -->
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css' rel='stylesheet'
        integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC' crossorigin='anonymous'>

    <!-- DATATABLE BLOCK -->
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js'></script>
    <link rel='stylesheet' type='text/css' href='https://cdn.datatables.net/1.13.3/css/dataTables.bootstrap5.min.css' />
    <script type='text/javascript' src='https://cdn.datatables.net/1.13.3/js/jquery.dataTables.min.js'></script>
    <script type='text/javascript' src='https://cdn.datatables.net/1.13.3/js/dataTables.bootstrap5.min.js'></script>
    <script>
        \$(document).ready(function () {
            \$('#mytable').DataTable(
                {
                    'scrollY': '700px',
                    'paging': false,
                    'autoWidth': true
                }
            );
        });
    </script>
    <!-- DATATABLE BLOCK -->

    <title>OUTPUT - template_bashscript_20230310-151806</title>
</head>
<body>
<div class='container'>" ;

HTML_BOOTSTRAP_FOOTER="</div><!-- Option 1: Bootstrap Bundle with Popper -->
<script src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js'
  integrity='sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM' crossorigin='anonymous'></script>
</body></html>" ;

DATATABLE_HEADER="<table class='table table-striped' id='mytable' class='display' style='width:100%'>
    <thead>
        <tr>
            <th>TITLE_1</th>
            <th>TITLE_2</th>
            <th>TITLE_3</th>
        </tr>
    </thead>
    <tbody>"


DATATABLE_CONTENT_ROWS="<tr>
            <td>1</td>
            <td>Demo recipe title 1 </td>
            <td>demo recipe url link 1</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Demo recipe title 2</td>
            <td>demo recipe url link 2</td>
        </tr>"

DATATABLE_FOOTER="</tbody></table>"

##################################################################################
## CREATING HTML OUTPUT
##################################################################################
echo "$HTML_BOOTSTRAP_HEADER" > $OUTPUT_HTML ; ## Initializing HTML output
echo "<h1>HTML OUTPUT - $THIS_SCRIPT_NAME_SANS_EXTENSION</h1>" >> $OUTPUT_HTML ;
echo "<p>Page last updated: $(date)" >> $OUTPUT_HTML ;
echo "<br>Page updated by script: $THIS_SCRIPT_NAME</p><hr>" >> $OUTPUT_HTML ;
##
echo "$DATATABLE_HEADER"  >> $OUTPUT_HTML ;
echo "$DATATABLE_CONTENT_ROWS"  >> $OUTPUT_HTML ;
echo "$DATATABLE_FOOTER"  >> $OUTPUT_HTML ;
##
echo "$HTML_BOOTSTRAP_FOOTER" >> $OUTPUT_HTML ;
##################################################################################
## CREATING TXT OUTPUT
##################################################################################
echo "HTML OUTPUT - $THIS_SCRIPT_NAME_SANS_EXTENSION" >> $OUTPUT_TXT ;
echo "Page last updated: $(date)" >> $OUTPUT_TXT ;
echo "Page updated by script: $THIS_SCRIPT_NAME" >> $OUTPUT_TXT ;
echo "##---------------------------------------------------------" >> $OUTPUT_TXT ;
##################################################################################


################################ FINAL SUMMARY ####################################
echo "## SUMMARY PRINTING #########################################################" ;
echo "##---------------------------------------------------------------------------"
success ">>>> SUCCESS // SUMMARY: OUTPUT HTML FILE CREATED AT => $OUTPUT_HTML" ;
success ">>>> SUCCESS // SUMMARY: OUTPUT TXT FILE CREATED AT => $OUTPUT_TXT" ;
echo "################################################################################" ;

################################################################################
############################### PROGRAM ENDS ###################################
################################################################################
echo "$(date) = END-TIME" >> $time_taken
cat $time_taken


################################################################################
## BLOCK TO GIVE USER SOME OPTIONS TO RUN 
################################################################################
while true
do
        echo "1. Update the system "
        echo "2. Upgrade the system "
        echo "3. Exit prompt"
   read Input
   case "$Input" in
        1) exec sudo apt update ;;
        2) exec sudo apt upgrade  ;;
        3) break
   esac
done
################################################################################