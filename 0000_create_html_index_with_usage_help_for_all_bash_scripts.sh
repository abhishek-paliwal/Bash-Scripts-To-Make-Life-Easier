#/bin/bash
##################################################################################
OUTPUT_DIR="$HOME_WINDOWS/Dropbox/Public/_TO_SYNC_downloads.concepro.com/dropbox-public-files/LCE/_pali_github_scripts_outputs"
##################################################################################

##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## CREATING SCRIPT USAGE FUNCTION AND CALLING IT VIA '--help'
usage()
{
cat <<EOM
USAGE: $(basename $0)
    ## THIS SCRIPT CREATES AN HTML OUTPUT FILE in THIS OUTPUT DIR ==>
    ## $OUTPUT_DIR 
    ## LISTING ALL THE BASH_SCRIPT NAMES IN $DIR_GITHUB
    ## AND ALSO WHETHER THEY HAVE THE USAGE HELP FUNCTION BLOCK IN THEM OR NOT.
    ##################################################################################
    ## USAGE_HOWTO ON CLI > bash $(basename $0)
    ##################################################################################
    ## If that usage function is not found, then you will have to manually create it.
    ## >> The idea here is that all bash scripts ending in *.sh extension should have 
    ## >> the usage help function in them, so that if that script is called as 
    ## >> bash SCRIPT_NAME --help , it should return the usage help.
    ##################################################################################
    ## CREATED ON: 2020-03-21 22:08
    ## CREATED BY: PALI
    ##################################################################################
EOM

exit 0 ## EXITING IF ONLY USAGE IS NEEDED
}
## Calling the usage function
if [ "$1" == "--help" ] ; then usage ; fi
##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

##################################################################################
cd $OUTPUT_DIR
echo ">> PWD = $(pwd)" 
##################################################################################

##################################################################################
##################################################################################
outfile="$OUTPUT_DIR/_TMP_OUTPUT_0000_create_html_index_with_usage_help.html" ;

echo "<!doctype html>
 <html lang='en'>
  <head>
   <!-- Required meta tags -->
    <meta charset='utf-8'>
     <meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
      <!-- Bootstrap CSS -->
       <link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'>
        <title>0000 HELP-USAGE SCRIPT OUTPUT // Help Usage Bash and Python Scripts</title>
         </head>
          <body>
           <div class='container-fluid'><!-- BEGIN: main containter div -->" > $outfile



echo "<p>Autocreated on: $(date)" >> $outfile ;
echo "<br>This html file is autogenerated by this script: $(basename $0)</p>" >> $outfile ;

echo "<hr><h1>List of my Bash and Python Scripts with help usage function defined</h1>" >> $outfile 
echo "<h5 style='color:blue;'>Blue (bash script) OR Green (python script) color = Usage function found. // Red color = Usage function not found.</h5>" >> $outfile 
echo "<h5 style='color:red;'>IMPORTANT NOTE: Fix those files which don't have the usage function in them.</h5>" >> $outfile 

echo "<table class='table'>
  <thead>
    <tr>
      <th scope='col'>#</th>
      <th scope='col'>SCRIPT_NAME</th>
      <th scope='col'>USAGE_FUNCTION FOUND OR NOT</th>
      <th scope='col'>USAGE_BLOCK_OUTPUT</th>
    </tr>
  </thead>
  <tbody>" >> $outfile ;

##------------------------------------------------------------------------------
################# BEGIN: PRINTING FOR SCRIPTS #########################
PATHDIR="$DIR_GITHUB/Bash-Scripts-To-Make-Life-Easier"
count=0;
## Print the bash script where usage function is not found.
echo "<tr class='table-dark'> <th scope='row'>#</th> <td>SCRIPTS WHERE USAGE FUNCTION IS NOT FOUND (red rows)</td> <td>They need fixing.</td> <td>usage_output</td> </tr>" >> $outfile ;
echo "<tr> <th scope='row'>#</th> <td>Row left blank intentionally.</td> <td></td> </tr>" >> $outfile ;
for x in $(grep -irL --include \*.sh --include \*.py 'usage()' $PATHDIR/) ; do
    ((count++))
    script_name=$(echo $x | sed 's|/home/ubuntu/GitHub/Bash-Scripts-To-Make-Life-Easier/||g') ;
    echo "-- USAGE FUNCTION NOT FOUND IN ==> $x" ; 
    echo "<tr class='table-danger'> <th scope='row'>$count</th> <td>$script_name</td> <td>Usage function not found. Fix it.</td> <td>usage_output not found.</td> </tr>" >> $outfile ;
done

echo;echo;
## Print the bash script where usage function is found.
echo "<tr class='table-dark'> <th scope='row'>#</th> <td>SCRIPTS WHERE USAGE FUNCTION IS FOUND (blue rows)</td> <td>They do not need fixing.</td> <td>usage_output</td> </tr>" >> $outfile ;
for x in $(grep -irl --include \*.sh --include \*.py 'usage()' $PATHDIR/) ; do
    ((count++))
    ## Get file extension (sh OR py)
    file_extension="${x##*.}";
    script_name=$(echo $x | sed 's|/home/ubuntu/GitHub/Bash-Scripts-To-Make-Life-Easier/||g') ;  
    echo; echo "++ USAGE FUNCTION FOUND IN ==> $x // EXTENSION = $file_extension" ; 
    
    ## Check the file extension and run corresponding help command 
    if [ "$file_extension" == "sh" ] ; then 
      usage_output=$(bash $x --help | sed 's/</\&lt;/g' | sed 's/>/\&gt;/g') ;
      echo "<tr class='table-primary'> <th scope='row'>$count</th> <td>$script_name</td> <td>Usage function found</td> <td> <pre><code>$usage_output</code></pre> </td> </tr>" >> $outfile ;
    elif [ "$file_extension" == "py" ] ; then
      usage_output=$(python3 $x --help | sed 's/</&lt;/g' | sed 's/>/&gt;/g' | sed 's|/home/ubuntu/GitHub/Bash-Scripts-To-Make-Life-Easier/||g' ) ;
      echo "<tr class='table-success'> <th scope='row'>$count</th> <td>$script_name</td> <td>Usage function found</td> <td> <pre><code>$usage_output</code></pre> </td> </tr>" >> $outfile ;
    else
     usage_output="NOT A VALID *.sh OR *.py file." ;
     echo "<tr class='table-warning'> <th scope='row'>$count</th> <td>$script_name</td> <td>Usage function found</td> <td> <pre><code>$usage_output</code></pre> </td> </tr>" >> $outfile ;
    fi    
  
done
##------------------------------------------------------------------------------
################# END: PRINTING FOR SCRIPTS #########################

echo "</tbody></table>" >> $outfile

echo "</div> <!-- END: main containter div -->
 <!-- Optional Bootstrap JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
   <script src='https://code.jquery.com/jquery-3.3.1.slim.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js'></script>
     <script src='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js'></script>
      </body>
       </html>" >> $outfile